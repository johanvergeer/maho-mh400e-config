import pathlib
import shutil
import glob

import nox

EN_CORE_WEB_SM_VERSION = "3.8.0"


@nox.session
def build_test(session: nox.Session) -> None:
    """Run a CMake build including all test artifacts.

    This target is primarily intended for IDE integration and to verify that
    all test-related sources build correctly. It is not required to run the
    tests themselves, as Ceedling uses its own build process.

    `ceedling build` is called because its build creates the unity.h and cmock.h headers.
    """
    session.run(
        "cmake",
        "-B", "cmake-build-test",
        "-S", ".",
        "-G", "Ninja",
        "-DCMAKE_BUILD_TYPE=Test",
        "-DCMAKE_MAKE_PROGRAM=ninja",
        external=True
    )

    session.chdir("Components")
    session.run("ceedling", "build", external=True)


@nox.session
def clean(_: nox.Session) -> None:
    """Remove all build artifacts generated by CMake and Ceedling.

    This cleans up all cmake-build-* directories and the Components/build
    directory used by Ceedling.
    """
    for cmake_build_path in pathlib.Path('.').glob('cmake-build-*'):
        if cmake_build_path.is_dir():
            print(f"Removing directory: {cmake_build_path}")
            shutil.rmtree(cmake_build_path, ignore_errors=True)
        else:
            print(f"Removing file: {cmake_build_path}")
            cmake_build_path.unlink(missing_ok=True)

    ceedling_build_path = pathlib.Path('.') / "Components" / "build"
    if ceedling_build_path.is_dir():
        print(f"Removing directory: {ceedling_build_path}")
        shutil.rmtree(ceedling_build_path, ignore_errors=True)


@nox.session
def test(session: nox.Session) -> None:
    """Run all Ceedling unit tests.

    A separate CMake build is not required for running these tests,
    as Ceedling manages its own build and test process.
    """
    session.chdir("Components")
    session.run("ceedling", "test", external=True)


@nox.session
def install_components(session: nox.Session) -> None:
    """Install all linuxcnc components"""
    session.run("sudo", "halcompile", "--install", "Components/src/Lubrication/lubrication.comp", external=True)
    session.run("sudo", "halcompile", "--install-doc", "Components/src/Lubrication/lubrication.comp", external=True)


@nox.session
def setup_gitlint(session):
    """Install gitlint + spacy + model via pipx."""
    session.run("pipx", "install", "gitlint", external=True)
    session.run("pipx", "inject", "gitlint", "spacy", external=True)
    session.run(
        "pipx",
        "inject",
        "gitlint",
        f"https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-{EN_CORE_WEB_SM_VERSION}/en_core_web_sm-{EN_CORE_WEB_SM_VERSION}-py3-none-any.whl",
        external=True
    )
    session.run("gitlint", "install-hook", external=True)

@nox.session
def lint(session):
    c_files = glob.glob("Components/src/**/*.c", recursive=True)
    h_files = glob.glob("Components/src/**/*.h", recursive=True)
    files = c_files + h_files
    if not files:
        session.error("No C or header files found to format.")

    session.run("clang-tidy", "-p", ".", *files, external=True)

@nox.session
def format(session):
    """Format all C and header files with clang-format."""
    c_files = glob.glob("Components/**/*.c", recursive=True)
    h_files = glob.glob("Components/**/*.h", recursive=True)
    files = c_files + h_files

    if not files:
        session.error("No C or header files found to format.")

    session.run("clang-format", "-i", *files, external=True)
