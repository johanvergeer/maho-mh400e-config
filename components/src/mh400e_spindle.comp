component mh400e_spindle "Safe spindle control with fault detection and spin-up delay";

pin in bit requested_forward "User requests forward spindle rotation";
pin in bit requested_reverse "User requests reverse spindle rotation";

pin in bit spindle_enabled "External feedback: is spindle relay allowed?";
pin in bit safety_ok "All safety conditions met for spindle operation";
pin in bit spindle_halt "True while the spindle is rotating or coasting to stop";
pin in bit reset "Reset fault condition";

pin out bit spindle_enable_forward "Output to spindle forward relay";
pin out bit spindle_enable_reverse "Output to spindle reverse relay";

pin out bit fault "True when a fault has occurred and must be reset";
pin out bit running "True when spindle is actively enabled and spin-up time has elapsed";

function _;

license "GPL";

option singleton;

;;

#include <rtapi.h>
#include <hal.h>

#define SPINDLE_SPINUP_TIME_NS 1000000000L // 1 second in nanoseconds

typedef enum {
    STATE_IDLE = 0,
    STATE_RUNNING_FWD,
    STATE_RUNNING_REV,
    STATE_FAULT
} state_t;

static state_t state = STATE_IDLE;
static long spindle_start_time_ns = 0;

FUNCTION(_) {
    // ===== Preconditie: dubbel richtingverzoek = fout =====
    if (requested_forward && requested_reverse) {
        spindle_enable_forward = 0;
        spindle_enable_reverse = 0;
        fault = 1;
        running = 0;
        state = STATE_FAULT;
        spindle_start_time_ns = 0;
        return;
    }

    // ===== Statemachine =====
    switch (state) {
        case STATE_IDLE:
            if (!(safety_ok) || !(spindle_enabled) || spindle_halt) {
                break;
            }
            if (requested_forward) {
                state = STATE_RUNNING_FWD;
            } else if (requested_reverse) {
                state = STATE_RUNNING_REV;
            }
            break;

        case STATE_RUNNING_FWD:
            if (!(safety_ok) || !(spindle_enabled) || requested_reverse) {
                state = STATE_FAULT;
                break;
            }
            if (!(requested_forward)) {
                state = STATE_IDLE;
            }
            break;

        case STATE_RUNNING_REV:
            if (!(safety_ok) || !(spindle_enabled) || requested_forward) {
                state = STATE_FAULT;
                break;
            }
            if (!(requested_reverse)) {
                state = STATE_IDLE;
            }
            break;

        case STATE_FAULT:
            if (reset && safety_ok && spindle_enabled && !(spindle_halt)) {
                state = STATE_IDLE;
            }
            break;
    }

    // ===== Outputs op basis van state =====
    spindle_enable_forward = (state == STATE_RUNNING_FWD);
    spindle_enable_reverse = (state == STATE_RUNNING_REV);

    // long now = hal_get_time();
    if (state == STATE_RUNNING_FWD || state == STATE_RUNNING_REV) {
        if (spindle_start_time_ns == 0) {
            // spindle_start_time_ns = now;
        }
    } else {
        spindle_start_time_ns = 0;
    }

    //bool spindle_running_ready = (spindle_start_time_ns > 0) &&
    //                              ((now - spindle_start_time_ns) >= SPINDLE_SPINUP_TIME_NS);

    // running = spindle_running_ready;
    fault = (state == STATE_FAULT);
}
